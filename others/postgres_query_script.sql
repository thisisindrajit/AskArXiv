SELECT * FROM public.scholarly_articles ORDER BY published DESC LIMIT 10;

SELECT * FROM public.scholarly_articles WHERE id in ('2401.06763v1', '2401.06710v1', 
													 '2401.06683v1', '2401.06703v1', 
													 '2401.06740v1');
													 
SELECT SUM(total_ingested) FROM public.arxiv_categories;

SELECT id, total_ingested, last_ingested_at FROM public.arxiv_categories ORDER BY total_ingested
DESC;

SELECT pg_size_pretty(pg_total_relation_size('public.scholarly_articles'));

SELECT * FROM public.scholarly_articles WHERE id='1706.03762';

SELECT COUNT(id) FROM public.scholarly_articles;

-- ids of articles where the abstract does not end with full stop but with a number (basically % 
-- seems to doing something and cutting off the abstract during ingestion)
SELECT id FROM public.scholarly_articles WHERE abstract ~* '\d$' AND abstract !~* '\.$';

SELECT COUNT(id) FROM public.scholarly_articles WHERE abstract ~* '\d$' AND abstract !~* '\.$';

-- Sample query for search
WITH unnested_categories AS (
	SELECT id, unnest(categories) as category_ids
	FROM public.scholarly_articles
	WHERE id in ('2112.13986v1','1709.03329v1','2112.02162v1',
				 '1812.05415v1','1910.00652v3','1906.01885v1',
				 '1606.08164v2','1609.08446v1','2312.03437v1',
				 '2102.00928v1')
),
extended_aggregated_categories AS (
	SELECT a.id, array_agg(b.category_title) as categories
		FROM unnested_categories a
		INNER JOIN public.arxiv_categories b
		ON a.category_ids = b.id
		GROUP BY a.id
)

SELECT b.id, b.title, b.abstract, b.categories as category_ids, a.categories, b.authors, b.published, b.comment 
	FROM extended_aggregated_categories a 
	INNER JOIN public.scholarly_articles b
	ON a.id = b.id
	ORDER BY
	CASE a.id
		WHEN '2112.13986v1' THEN 1
		WHEN '1709.03329v1' THEN 2
		WHEN '2112.02162v1' THEN 3
		WHEN '1812.05415v1' THEN 4
		WHEN '1910.00652v3' THEN 5
		WHEN '1906.01885v1' THEN 6
		WHEN '1606.08164v2' THEN 7
		WHEN '1609.08446v1' THEN 8
		WHEN '2312.03437v1' THEN 9
		WHEN '2102.00928v1' THEN 10
	END;
	
-- Update abstract
-- UPDATE public.scholarly_articles SET abstract='This paper evaluates the capability of two state-of-the-art artificial intelligence (AI) models, GPT-3.5 and Bard, in generating Java code given a function description. We sourced the descriptions from CodingBat.com, a popular online platform that provides practice problems to learn programming. We compared the Java code generated by both models based on correctness, verified through the platform&#x27;s own test cases. The results indicate clear differences in the capabilities of the two models. GPT-3.5 demonstrated superior performance, generating correct code for approximately 90.6% of the function descriptions, whereas Bard produced correct code for 53.1% of the functions. While both models exhibited strengths and weaknesses, these findings suggest potential avenues for the development and refinement of more advanced AI-assisted code generation tools. The study underlines the potential of AI in automating and supporting aspects of software development, although further research is required to fully realize this potential.' WHERE id='2305.09402v1';